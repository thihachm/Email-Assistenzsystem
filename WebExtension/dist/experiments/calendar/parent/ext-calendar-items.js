var{ExtensionCommon}=ChromeUtils.import("resource://gre/modules/ExtensionCommon.jsm"),{ExtensionUtils}=ChromeUtils.import("resource://gre/modules/ExtensionUtils.jsm"),{cal}=ChromeUtils.import("resource:///modules/calendar/calUtils.jsm"),{ExtensionAPI,EventManager}=ExtensionCommon,{ExtensionError}=ExtensionUtils;this.calendar_items=class extends ExtensionAPI{getAPI(e){const{getResolvedCalendarById:a,getCachedCalendar:n,isCachedCalendar:t,isOwnCalendar:r,propsToItem:i,convertItem:l,convertAlarm:o}=ChromeUtils.import("resource://experiment-calendar/experiments/calendar/ext-calendar-utils.jsm");return{calendar:{items:{query:async function(n){console.log(n);let t,r=[];return r="string"==typeof n.calendarId?[a(e.extension,n.calendarId)]:Array.isArray(n.calendarId)?n.calendarId.map((n=>a(e.extension,n))):cal.manager.getCalendars().filter((e=>!e.getProperty("disabled"))),n.id?t=await Promise.all(r.map((e=>e.getItem(n.id)))):(t=await Promise.all(r.map((async e=>{let a=Ci.calICalendar.ITEM_FILTER_COMPLETED_ALL;"event"==n.type?a|=Ci.calICalendar.ITEM_FILTER_TYPE_EVENT:"task"==n.type?a|=Ci.calICalendar.ITEM_FILTER_TYPE_TODO:a|=Ci.calICalendar.ITEM_FILTER_TYPE_ALL,n.expand&&(a|=Ci.calICalendar.ITEM_FILTER_CLASS_OCCURRENCES);let t=n.rangeStart?cal.createDateTime(n.rangeStart):null,r=n.rangeEnd?cal.createDateTime(n.rangeEnd):null;return e.getItemsAsArray(a,n.limit??0,t,r)}))),t=t.flat()),t.map((a=>l(a,n,e.extension)))},get:async function(n,t,r){let i=a(e.extension,n),o=await i.getItem(t);return l(o,r,e.extension)},create:async function(o,s){let d,m=a(e.extension,o),c=i(s);return c.calendar=m.superCalendar,s.metadata&&r(m,e.extension)&&n(m).setMetaData(c.id,JSON.stringify(s.metadata)),d=t(o)?await m.modifyItem(c,null):await m.adoptItem(c),l(d,s,e.extension)},update:async function(t,o,s){let d=a(e.extension,t),m=await d.getItem(o);if(!m)throw new ExtensionError("Could not find item "+o);m instanceof Ci.calIEvent?s.type="event":m instanceof Ci.calITodo&&(s.type="task");let c=i(s,m?.clone());c.calendar=d.superCalendar,s.metadata&&r(d,e.extension)&&n(d).setMetaData(c.id,JSON.stringify(s.metadata));let C=await d.modifyItem(c,m);return l(C,s,e.extension)},move:async function(a,t,i){if(a==i)return;let l=cal.manager.getCalendarById(a),o=cal.manager.getCalendarById(i),s=await l.getItem(t);if(!s)throw new ExtensionError("Could not find item "+t);if(r(o,e.extension)&&r(l,e.extension)){let e=n(l);n(o).setMetaData(s.id,e.getMetaData(s.id))}await o.addItem(s),await l.deleteItem(s)},remove:async function(n,t){let r=a(e.extension,n),i=await r.getItem(t);if(!i)throw new ExtensionError("Could not find item "+t);await r.deleteItem(i)},onCreated:new EventManager({context:e,name:"calendar.items.onCreated",register:(a,n)=>{let t=cal.createAdapter(Ci.calIObserver,{onAddItem:t=>{a.sync(l(t,n,e.extension))}});return cal.manager.addCalendarObserver(t),()=>{cal.manager.removeCalendarObserver(t)}}}).api(),onUpdated:new EventManager({context:e,name:"calendar.items.onUpdated",register:(a,n)=>{let t=cal.createAdapter(Ci.calIObserver,{onModifyItem:(t,r)=>{a.sync(l(t,n,e.extension),{})}});return cal.manager.addCalendarObserver(t),()=>{cal.manager.removeCalendarObserver(t)}}}).api(),onRemoved:new EventManager({context:e,name:"calendar.items.onRemoved",register:e=>{let a=cal.createAdapter(Ci.calIObserver,{onDeleteItem:a=>{e.sync(a.calendar.id,a.id)}});return cal.manager.addCalendarObserver(a),()=>{cal.manager.removeCalendarObserver(a)}}}).api(),onAlarm:new EventManager({context:e,name:"calendar.items.onAlarm",register:(a,n)=>{let t={QueryInterface:ChromeUtils.generateQI(["calIAlarmServiceObserver"]),onAlarm(t,r){a.sync(l(t,n,e.extension),o(t,r))},onRemoveAlarmsByItem(e){},onRemoveAlarmsByCalendar(e){},onAlarmsLoaded(e){}},r=Cc["@mozilla.org/calendar/alarm-service;1"].getService(Ci.calIAlarmService);return r.addObserver(t),()=>{r.removeObserver(t)}}}).api()}}}}};